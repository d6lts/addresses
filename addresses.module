<?php
// $Id$
/**
 * @author Bruno Massa
 * @file addresses.module
 * You can associate a geographic address with content and users.
 */

/**
 * Each address field can be: displayed, required, hidden or not
 * used at all
 */
define('ADDRESSES_FIELD_NONE',      0);
define('ADDRESSES_FIELD_SHOW',      1);
define('ADDRESSES_FIELD_REQUIRED',  2);
define('ADDRESSES_FIELD_HIDDEN',    3);

/**
 * Implementation of hook_addressfieldapi().
 *
 * Its a specific Addresses module hook function, to
 * allow other modules to add more fields to the addresses
 */
function addresses_addressesfieldapi($op, $fields = array(), $values = array()) {
  if ($op == 'fields') {
    return array(
      'aname' => array(
        'type'        => 'varchar',
        'length'      => 75,
        'description' => t('The nickname of this address, like "Home", "Office", "Anna\'s appartment"'),
        'display'     => ADDRESSES_FIELD_NONE,
        'title'       => t('Address Name'),
      ),
      'street' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'description' => t('Street, number...'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Street'),
      ),
      'additional' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'description' => t('More info like appartment block, number or address reference'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Additional'),
      ),
      'city' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'description' => t('Name of the city'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('City'),
      ),
      'province' => array(
        'type'        => 'varchar',
        'length'      => 16,
        'description' => t('Name of the state/province/county/territory'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Province'),
      ),
      'country' => array(
        'type'        => 'varchar',
        'length'      => 2,
        'description' => t('The ISO alpha 3 code of each country (its a 2-digit code)'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Country'),
      ),
      'postal_code' => array(
        'type'        => 'varchar',
        'length'      => 16,
        'description' => t('The address postal code (ZIP code for US people)'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Postal code'),
      ),
      'is_primary' => array(
        'type'        => 'int',
        'size'        => 'tiny',
        'default'     => 0,
        'description' => t('Mark it as the primary address or not (default is not)'),
        'display'     => ADDRESSES_FIELD_NONE,
        'title'       => t('Primary Address Checkbox'),
      )
    );
  }
  elseif ($op == 'form') {
    return _addresses_addressesfieldapi_form($fields, $values);
  }
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function addresses_elements() {
  // Get a list of all address-related fields
  $ftypes = module_invoke_all('addressesfieldapi', 'fields');
  foreach (array_keys($ftypes) as $ftype) {
    $fields[] = $ftype;
  }

  return array(
    'addresses_elements' => array(
      '#columns'  => $fields,
      '#delta'    => 0,
      '#input'    => TRUE,
      '#process'  => array('addresses_elements_process'),
    )
  );
}

/**
 * Generate the address "field", creating all form fields
 *
 * @return
 *   Array. Form fields
 */
function addresses_elements_process($element, $edit, $form_state, $form) {
  $fields = $element['#fields'];
  $values = $element['#default_value'];

  // Reset the required fields based on the general required value
  if (empty($element['#required'])) {
    foreach ($fields as $field => $required) {
      if ($required == ADDRESSES_FIELD_REQUIRED) {
        $fields[$field] = ADDRESSES_FIELD_SHOW;
      }
    }
  }

  // Reset unwanted attributes
  $element['#title'] = '';
  $element['#description'] = '';

  // If its a existing address, save the Address ID
  // for further processing
  if (!empty($values['aid'])) {
    $element['aid'] = array(
      '#type'   => 'hidden',
      '#value'  => $values['aid']
    );
  }

  // Include the main module file
  module_load_include('inc', 'addresses');

  // Get other fields from hook_addressesfieldsapi
  $element = array_merge(
    $element,
    module_invoke_all('addressesfieldapi', 'form', $fields, $values)
  );

  return $element;
}

/**
 * Implementation of hook_menu().
 */
function addresses_menu() {
  $items['admin/settings/address'] = array(
    'access arguments'  => array('access administration pages'),
    'description'       => 'Settings for Address module',
    'file'              => 'addresses.inc',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('_addresses_admin'),
    'title'             => 'Addresses',
  );
  $items['admin/settings/address/autocomplete'] = array(
    'access callback'   => TRUE,
    'file'              => 'addresses.inc',
    'page callback'     => '_addresses_autocomplete',
    'type'              => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function addresses_theme() {
  return array(
    // Shows addresses normally
    'addresses' => array(
      'arguments' => array('address', 'hide'),
      'file'      => 'addresses.inc',
    ),
    // Shows address forms
    'addresses_form' => array(
      'arguments' => array('form'),
      'file'      => 'addresses.inc',
    ),
    // Shows addresses using a single line
    'addresses_address_singleline' => array(
      'arguments' => array('addresses'),
      'file'      => 'addresses.inc',
    ),
    // Shows address elements
    'addresses_elements' => array(
      'arguments' => array('form'),
      'file'      => 'addresses.inc',
    ),
    // Choose the addresses fields
    'addresses_select_fields' => array(
      'arguments' => array('form'),
      'file'      => 'addresses.inc',
    ),
  );
}

/**
 * Implementation of hook_token_list().
 */
function addresses_token_list($type = 'all') {
  if ($type == 'addresses' or $type == 'all') {
    $tokens['addresses']['aname']         = t('Address name.');
    $tokens['addresses']['street']        = t('Street.');
    $tokens['addresses']['additional']    = t('The order ID.');
    $tokens['addresses']['province_name'] = t('State/Province name.');
    $tokens['addresses']['province_code'] = t('State/Province code.');
    $tokens['addresses']['country_name']  = t('Country name');
    $tokens['addresses']['country_code2'] = t('Country 2-digits code');
    $tokens['addresses']['postal_code']   = t('Postal code.');
    return $tokens;
  }
}

/**
 * Implementation of hook_token_values().
 */
function addresses_token_values($type, $object = NULL) {
  if ($type == 'addresses') {
    $countries = _addresses_country_get();

    $values['primary']        = empty($object['primary'])     ? '' :
      ' ('. t('default') .')';
    $values['aname']          = empty($object['aname'])       ? '' :
      '<span class="fn org">'. theme('placeholder', $object['aname']) . $values['primary'] .'</span>';
    $values['street']         = empty($object['street'])      ? '' :
      '<span class="street-address">'. $object['street'] .'</span>';
    $values['additional']     = empty($object['additional'])  ? '' :
      $object['additional'];
    $values['city']           = empty($object['city'])        ? '' :
      '<span class="city locality">'. $object['city'] .'</span>';
    $values['province_name']  = empty($object['province'])    ? '' :
      '<span class="region">'.        $object['province'] .'</span>';
    $values['province_code']  = empty($object['province'])    ? '' :
      '<span class="region">'.        $object['province'] .'</span>';
    $values['country_name']   = empty($object['country'])     ? '' :
      '<span class="country-name">'.  t($countries[$object['country']]) .'</span>';
    $values['country_code2']  = empty($object['country'])     ? '' :
      '<span class="country-code">'.  $object['country'] .'</span>';
    $values['postal_code']    = empty($object['postal_code']) ? '' :
      '<span class="postal-code">'.    $object['postal_code'] .'</span>';
    return $values;
  }
}
