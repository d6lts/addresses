<?php
// $Id$
/**
 * @author Bruno Massa
 * @file addresses.module
 * You can associate a geographic address with content and users.
 */

/**
 * Each address field can be: displayed, required, hidden or not
 * used at all
 */
define('ADDRESSES_FIELD_NONE',      0);
define('ADDRESSES_FIELD_SHOW',      1);
define('ADDRESSES_FIELD_REQUIRED',  2);
define('ADDRESSES_FIELD_HIDDEN',    3);

/**
 * Implementation of hook_addressfieldapi().
 *
 * Its a specific Addresses module hook function, to
 * allow other modules to add more fields to the addresses
 */
function addresses_addressesfieldapi($op, $fields = array(), $values = array()) {
  if ($op == 'fields') {
    return array(
      'aname' => array(
        'type'        => 'varchar',
        'length'      => 75,
        'description' => t('The nickname of this address, like "Home", "Office", "Anna\'s appartment"'),
        'display'     => ADDRESSES_FIELD_NONE,
        'title'       => t('Address Name'),
      ),
      'street' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'description' => t('Street, number...'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Street'),
      ),
      'additional' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'description' => t('More info like appartment block, number or address reference'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Additional'),
      ),
      'city' => array(
        'type'        => 'varchar',
        'length'      => 255,
        'description' => t('Name of the city'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('City'),
      ),
      'province' => array(
        'type'        => 'varchar',
        'length'      => 16,
        'description' => t('Name of the state/province/county/territory'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Province'),
      ),
      'country' => array(
        'type'        => 'varchar',
        'length'      => 2,
        'description' => t('The ISO alpha 3 code of each country (its a 2-digit code)'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Country'),
      ),
      'postal_code' => array(
        'type'        => 'varchar',
        'length'      => 16,
        'description' => t('The address postal code (ZIP code for US people)'),
        'display'     => ADDRESSES_FIELD_SHOW,
        'title'       => t('Postal code'),
      ),
      'is_primary' => array(
        'type'        => 'int',
        'size'        => 'tiny',
        'default'     => 0,
        'description' => t('Mark it as the primary address or not (default is not)'),
        'display'     => ADDRESSES_FIELD_NONE,
        'title'       => t('Primary Address Checkbox'),
      )
    );
  }
  elseif ($op == 'form') {
    // Let users select if the address is the primary
    if ($fields['is_primary'] == ADDRESSES_FIELD_HIDDEN) {
      $form['is_primary'] = array(
        '#type'           => 'hidden',
        '#value'          => isset($values['is_primary']) ? $values['is_primarys'] : '',
      );
    }
    elseif (!empty($fields['is_primary'])) {
      $form['is_primary'] = array(
        '#type'           => 'checkbox',
        '#title'          => t('Default address'),
        '#default_value'  => isset($values['is_primary']) ? $values['is_primary'] : ''
      );
    }

    // Adds the Address Name (Home, Office, Rio de Janeiro...)
    if ($fields['aname'] == ADDRESSES_FIELD_HIDDEN) {
      $form['aname'] = array(
        '#type'           => 'hidden',
        '#value'          => isset($values['aname']) ? $values['aname'] : '',
      );
    }
    elseif (!empty($fields['aname'])) {
      $form['aname'] = array(
        '#type'           => 'textfield',
        '#title'          => t('Address name'),
        '#default_value'  => isset($values['aname']) ? $values['aname'] : '',
        '#size'           => 50,
        '#maxlength'      => 75,
        '#description'    => t('e.g. a place of business, venue, meeting point'),
        '#attributes'     => NULL,
        '#required'       => ($fields['aname'] == ADDRESSES_FIELD_REQUIRED)
      );
    }

    // Adds the Country
    if ($fields['country'] == ADDRESSES_FIELD_HIDDEN) {
      $form['country'] = array(
        '#type'           => 'hidden',
        '#value'          => isset($values['country']) ? $values['country'] : '',
      );
    }
    elseif (!empty($fields['country'])) {
      // Get a list of enabled contries
      $countries = array('' => '') +
        _addresses_country_get(variable_get('addresses_contry_list', array()));

      $form['country'] = array(
        '#type'           => 'select',
        '#title'          => t('Country'),
        '#default_value'  => isset($values['country']) ? $values['country'] : '',
        '#options'        => $countries,
        '#description'    => NULL,
        '#extra'          => 0,
        '#multiple'       => FALSE,
        '#required'       => ($fields['country'] == ADDRESSES_FIELD_REQUIRED)
      );
    }

    // Adds the Province field
    if ($fields['province'] == ADDRESSES_FIELD_HIDDEN) {
      $form['province'] = array(
        '#type'           => 'hidden',
        '#value'          => isset($values['province']) ? $values['province'] : '',
      );
    }
    elseif (!empty($fields['province'])) {
      $form['province'] = array(
        '#default_value'  => isset($values['province']) ? $values['province'] : '',
        '#maxlength'      => 16,
        '#required'       => ($fields['province'] == ADDRESSES_FIELD_REQUIRED),
        '#size'           => 16,
        '#title'          => t('State / Province'),
        '#type'           => 'textfield',
      );
//       $form['#validate'][] = '_addresses_province_validate';
    }

    // Adds the City
    if ($fields['city'] == ADDRESSES_FIELD_HIDDEN) {
      $form['city'] = array(
        '#type'           => 'hidden',
        '#value'          => isset($values['city']) ? $values['city'] : '',
      );
    }
    elseif (!empty($fields['city'])) {
      $form['city'] = array(
        '#type'           => 'textfield',
        '#title'          => t('City'),
        '#default_value'  => isset($values['city']) ? $values['city'] : '',
        '#size'           => 50,
        '#maxlength'      => 255,
        '#description'    => NULL,
        '#attributes'     => NULL,
        '#required'       => ($fields['city'] == ADDRESSES_FIELD_REQUIRED)
      );
    }

    // Adds the Streets and the Additional fields
    if ($fields['street'] == ADDRESSES_FIELD_HIDDEN) {
      $form['street'] = array(
        '#type'           => 'hidden',
        '#value'          => isset($values['street']) ? $values['street'] : '',
      );
      $form['additional'] = array(
        '#type'           => 'hidden',
        '#value'          => isset($values['additional']) ? $values['additional'] : '',
      );
    }
    elseif (!empty($fields['street'])) {
      $form['street'] = array(
        '#type'           => 'textfield',
        '#title'          => t('Street'),
        '#default_value'  => isset($values['street']) ? $values['street'] : '',
        '#size'           => 50,
        '#maxlength'      => 255,
        '#required'       => ($fields['street'] == ADDRESSES_FIELD_REQUIRED)
      );
      $form['additional'] = array(
        '#type'           => 'textfield',
        '#title'          => t('Additional'),
        '#default_value'  => isset($values['additional']) ? $values['additional'] : '',
        '#size'           => 50,
        '#maxlength'      => 255
      );
    }

    // Adds the Postal Code
    if ($fields['postal_code'] == ADDRESSES_FIELD_HIDDEN) {
      $form['postal_code'] = array(
        '#type'           => 'hidden',
        '#value'          => isset($values['postal_code']) ? $values['postal_code'] : '',
      );
    }
    elseif (!empty($fields['postal_code'])) {
      $form['postal_code'] = array(
        '#type'           => 'textfield',
        '#title'          => t('Postal code'),
        '#default_value'  => isset($values['postal_code']) ? $values['postal_code'] : '',
        '#size'           => 16,
        '#maxlength'      => 16,
        '#required'       => ($fields['postal_code'] == ADDRESSES_FIELD_REQUIRED)
      );
    }

    return $form;
  }

  return $form;
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function addresses_elements() {
  // Get a list of all address-related fields
  $ftypes = module_invoke_all('addressesfieldapi', 'fields');
  foreach (array_keys($ftypes) as $ftype) {
    $fields[] = $ftype;
  }

  return array(
    'addresses_elements' => array(
      '#columns'  => $fields,
      '#delta'    => 0,
      '#input'    => TRUE,
      '#process'  => array('addresses_elements_process'),
    )
  );
}

/**
 * Generate the address "field", creating all form fields
 *
 * @return
 *   Array. Form fields
 */
function addresses_elements_process($element) {
  $fields = $element['#fields'];
  $values = $element['#default_value'];

  // Reset unwanted attributes
  $element['#title'] = '';
  $element['#description'] = '';

  // If its a existing address, save the Address ID
  // for further processing
  if (!empty($values['aid'])) {
    $element['aid'] = array(
      '#type'   => 'hidden',
      '#value'  => $values['aid']
    );
  }

  // Include the main module file
  module_load_include('inc', 'addresses');

  // Get other fields from hook_addressesfieldsapi
  $element = array_merge(
    $element,
    module_invoke_all('addressesfieldapi', 'form', $fields, $values)
  );

  return $element;
}

/**
 * Implementation of hook_menu().
 */
function addresses_menu() {
  $items['admin/settings/address'] = array(
    'description'     => 'Settings for Address module',
    'file'            => 'addresses.inc',
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('_addresses_admin'),
    'title'           => 'Addresses',
  );
  $items['admin/settings/address/autocomplete'] = array(
    'access callback' => TRUE,
    'file'            => 'addresses.inc',
    'page callback'   => '_addresses_autocomplete',
    'type'            => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function addresses_theme() {
  return array(
    // Shows addresses normally
    'addresses' => array(
      'arguments' => array('address', 'hide'),
      'file'      => 'addresses.inc',
    ),
    // Shows address forms
    'addresses_form' => array(
      'arguments' => array('form'),
      'file'      => 'addresses.inc',
    ),
    // Shows addresses using a single line
    'addresses_address_singleline' => array(
      'arguments' => array('addresses'),
      'file'      => 'addresses.inc',
    ),
    // Shows address elements
    'addresses_elements' => array(
      'arguments' => array('form'),
      'file'      => 'addresses.inc',
    ),
    // Choose the addresses fields
    'addresses_select_fields' => array(
      'arguments' => array('form'),
      'file'      => 'addresses.inc',
    ),
  );
}

function _addresses_settings($field_values) {
  $ftypes = module_invoke_all('addressesfieldapi', 'fields');
  foreach ($ftypes as $ftype => $field) {
    // List of address fields
    $form['addresses'][$ftype] = array(
      '#default_value'  => empty($field_values[$ftype]) ? $field['display'] : $field_values[$ftype],
      '#options'        => array(
        ADDRESSES_FIELD_NONE      => '',
        ADDRESSES_FIELD_SHOW      => '',
        ADDRESSES_FIELD_REQUIRED  => '',
        ADDRESSES_FIELD_HIDDEN    => '',
      ),
      '#title'          => $field['title'],
      '#type'           => 'radios',
    );
  }

  return $form;
}
