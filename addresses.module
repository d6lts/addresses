<?php
/**
 * $Id$
 * @author Bruno Massa
 * @file addresses.module
 * You can associate a geographic address with content and users.
 */

define('ADDRESSES_PATH' , drupal_get_path('module', 'addresses'));

/**
 * The address fields can be: displayed, required, hidden or not
 * used at all
 */
define('ADDRESSES_FIELD_NONE',      0);
define('ADDRESSES_FIELD_SHOW',      1);
define('ADDRESSES_FIELD_REQUIRED',  2);
define('ADDRESSES_FIELD_HIDDEN',    3);

/**
 * Load the full address from a given Address ID or User ID
 *
 * @param $id
 *   Number. The ID to look into the table. Depends on $type variable:
 *   if it is 'address' (default), it should look for a unique address
 *   ID, on 'aid' column. For anything else, search on 'eid' column.
 * @param $type
 *   String (optional). It can be:
 *   - 'address' (default): than search for a unique Address ID
 *   - 'user': get all address from a user
 *   - 'node: get all address from a node
 * @return
 *   Array. The numeric list of addresses arrays
 */
function _addresses_address_get($id, $type = 'address') {
  static $addresses;

  if (empty($addresses[$type][$id])) {
    // Get the address based on Address ID or
    // the (User/Node) ID and the given identification
    if ($type == 'address') {
      $adr = db_query('SELECT * FROM {addresses} WHERE aid = %d', $id);
    }
    else {
      $adr = db_query("SELECT * FROM {addresses}
        WHERE atype = '%s' AND eid = %d
        ORDER BY is_primary DESC", $type, $id);
    }

    // Transform all SQL findings into arrays
    $addresses[$type][$id] = array();
    while ($address = db_fetch_array($adr)) {
      $addresses[$type][$id][] = $address;
    }
  }

  return $addresses[$type][$id];
}

/**
 * Implementation of hook_addressfieldapi().
 *
 * Its a specific Addresses module hook function, to
 * allow other modules to add more fields to the addresses
 */
function addresses_addressesfieldapi($op, &$form, $fields = array(), $values = array()) {
  if ($op == 'form') {
    for ($a = 0; $a < $fields['qty']; $a++) {
      // Let users select if the address is the primary
      if ($fields['is_primary'] == ADDRESSES_FIELD_HIDDEN) {
        $form['addresses'][$a]['is_primary'] = array(
          '#type'           => 'hidden',
          '#value'          => isset($values[$a]['is_primary']) ? $values[$a]['is_primarys'] : '',
        );
      }
      elseif (!empty($fields['is_primary'])) {
        $form['addresses'][$a]['is_primary'] = array(
          '#type'           => 'checkbox',
          '#title'          => t('Default address'),
          '#default_value'  => isset($values[$a]['is_primary']) ? $values[$a]['is_primary'] : ''
        );
      }

      // Adds the Address Name (Home, Office, Rio de Janeiro...)
      if ($fields['aname'] == ADDRESSES_FIELD_HIDDEN) {
        $form['addresses'][$a]['aname'] = array(
          '#type'           => 'hidden',
          '#value'          => isset($values[$a]['aname']) ? $values[$a]['aname'] : '',
        );
      }
      elseif (!empty($fields['aname'])) {
        $form['addresses'][$a]['aname'] = array(
          '#type'           => 'textfield',
          '#title'          => t('Address name'),
          '#default_value'  => isset($values[$a]['aname']) ? $values[$a]['aname'] : '',
          '#size'           => 50,
          '#maxlength'      => 75,
          '#description'    => t('e.g. a place of business, venue, meeting point'),
          '#attributes'     => NULL,
          '#required'       => ($fields['aname'] == ADDRESSES_FIELD_REQUIRED)
        );
      }

      // Adds the Country
      if ($fields['country'] == ADDRESSES_FIELD_HIDDEN) {
        $form['addresses'][$a]['country'] = array(
          '#type'           => 'hidden',
          '#value'          => isset($values[$a]['country']) ? $values[$a]['country'] : '',
        );
      }
      elseif (!empty($fields['country'])) {
        // Get a list of enabled contries
        $countries = array('' => '') +
          _addresses_country_get(FALSE, variable_get('addresses_contry_list', array()));

        $form['addresses'][$a]['country'] = array(
          '#type'           => 'select',
          '#title'          => t('Country'),
          '#default_value'  => isset($values[$a]['country']) ? $values[$a]['country'] : '',
          '#options'        => $countries,
          '#description'    => NULL,
          '#extra'          => 0,
          '#multiple'       => FALSE,
          '#required'       => ($fields['country'] == ADDRESSES_FIELD_REQUIRED)
        );
      }

      // Adds the Province field
      if ($fields['province'] == ADDRESSES_FIELD_HIDDEN) {
        $form['addresses'][$a]['province'] = array(
          '#type'           => 'hidden',
          '#value'          => isset($values[$a]['province']) ? $values[$a]['province'] : '',
        );
      }
      elseif (!empty($fields['province'])) {
        $form['addresses'][$a]['province'] = array(
    //       '#autocomplete_path'  => 'admin/settings/address/autocomplete',
          '#default_value'  => isset($values[$a]['province']) ? $values[$a]['province'] : '',
          '#maxlength'      => 16,
          '#required'       => ($fields['province'] == ADDRESSES_FIELD_REQUIRED),
          '#size'           => 16,
          '#title'          => t('State / Province'),
          '#type'           => 'textfield',
        );
        $form['#validate'][] = '_addresses_province_validate';
      }

      // Adds the City
      if ($fields['city'] == ADDRESSES_FIELD_HIDDEN) {
        $form['addresses'][$a]['city'] = array(
          '#type'           => 'hidden',
          '#value'          => isset($values[$a]['city']) ? $values[$a]['city'] : '',
        );
      }
      elseif (!empty($fields['city'])) {
        $form['addresses'][$a]['city'] = array(
          '#type'           => 'textfield',
          '#title'          => t('City'),
          '#default_value'  => isset($values[$a]['city']) ? $values[$a]['city'] : '',
          '#size'           => 50,
          '#maxlength'      => 255,
          '#description'    => NULL,
          '#attributes'     => NULL,
          '#required'       => ($fields['city'] == ADDRESSES_FIELD_REQUIRED)
        );
      }

      // Adds the Streets and the Additional fields
      if ($fields['street'] == ADDRESSES_FIELD_HIDDEN) {
        $form['addresses'][$a]['street'] = array(
          '#type'           => 'hidden',
          '#value'          => isset($values[$a]['street']) ? $values[$a]['street'] : '',
        );
        $form['addresses'][$a]['additional'] = array(
          '#type'           => 'hidden',
          '#value'          => isset($values[$a]['additional']) ? $values[$a]['additional'] : '',
        );
      }
      elseif (!empty($fields['street'])) {
        $form['addresses'][$a]['street'] = array(
          '#type'           => 'textfield',
          '#title'          => t('Street'),
          '#default_value'  => isset($values[$a]['street']) ? $values[$a]['street'] : '',
          '#size'           => 50,
          '#maxlength'      => 255,
          '#required'       => ($fields['street'] == ADDRESSES_FIELD_REQUIRED)
        );
        $form['addresses'][$a]['additional'] = array(
          '#type'           => 'textfield',
          '#title'          => t('Additional'),
          '#default_value'  => isset($values[$a]['additional']) ? $values[$a]['additional'] : '',
          '#size'           => 50,
          '#maxlength'      => 255
        );
      }

      // Adds the Postal Code
      if ($fields['postal_code'] == ADDRESSES_FIELD_HIDDEN) {
        $form['addresses'][$a]['postal_code'] = array(
          '#type'           => 'hidden',
          '#value'          => isset($values[$a]['postal_code']) ? $values[$a]['postal_code'] : '',
        );
      }
      elseif (!empty($fields['postal_code'])) {
        $form['addresses'][$a]['postal_code'] = array(
          '#type'           => 'textfield',
          '#title'          => t('Postal code'),
          '#default_value'  => isset($values[$a]['postal_code']) ? $values[$a]['postal_code'] : '',
          '#size'           => 16,
          '#maxlength'      => 16,
          '#required'       => ($fields['postal_code'] == ADDRESSES_FIELD_REQUIRED)
        );
      }
    }
  }
  elseif ($op == 'settings') {
    // This list of options are used many times, so its
    // usefull to create it now an use it later
    $options = array(
      ADDRESSES_FIELD_NONE      => t('None'),
      ADDRESSES_FIELD_SHOW      => t('Normal'),
      ADDRESSES_FIELD_REQUIRED  => t('Required'),
      ADDRESSES_FIELD_HIDDEN    => t('Hidden')
    );

    // List of address fields
    $form['addresses']['is_primary'] = array(
      '#default_value'  => empty($fields['is_primary']) ? ADDRESSES_FIELD_NONE : $fields['is_primary'],
      '#options'        => $options,
      '#title'          => t('Primary Address Checkbox'),
      '#type'           => 'radios',
    );
    $form['addresses']['aname'] = array(
      '#default_value'  => empty($fields['aname']) ? ADDRESSES_FIELD_NONE : $fields['aname'],
      '#options'        => $options,
      '#title'          => t('Address Name'),
      '#type'           => 'radios',
    );
    $form['addresses']['country'] = array(
      '#default_value'  => empty($fields['country']) ? ADDRESSES_FIELD_SHOW : $fields['country'],
      '#options'        => $options,
      '#title'          => t('Country'),
      '#type'           => 'radios',
    );
    $form['addresses']['province'] = array(
      '#default_value'  => empty($fields['province']) ? ADDRESSES_FIELD_SHOW : $fields['province'],
      '#options'        => $options,
      '#title'          => t('Province'),
      '#type'           => 'radios',
    );
    $form['addresses']['city'] = array(
      '#default_value'  => empty($fields['city']) ? ADDRESSES_FIELD_SHOW : $fields['city'],
      '#options'        => $options,
      '#title'          => t('City'),
      '#type'           => 'radios',
    );
    $form['addresses']['street'] = array(
      '#default_value'  => empty($fields['street']) ? ADDRESSES_FIELD_SHOW : $fields['street'],
      '#options'        => $options,
      '#title'          => t('Street'),
      '#type'           => 'radios',
    );
    $form['addresses']['postal_code'] = array(
      '#default_value'  => empty($fields['postal_code']) ? ADDRESSES_FIELD_SHOW : $fields['postal_code'],
      '#options'        => $options,
      '#title'          => t('Postal code'),
      '#type'           => 'radios',
    );
  }

  return $form;
}

/**
 * Implementation of hook_menu().
 */
function addresses_menu() {
  $items['admin/settings/address'] = array(
    'description'     => t('Settings for Address module'),
    'file'            => 'addresses.inc',
    'page callback'   => 'drupal_get_form',
    'page arguments'  => array('_addresses_admin'),
    'title'           => t('Addresses'),
  );

  /// @todo use the correct ACCESS PERMISSION
  $items['admin/settings/address/autocomplete'] = array(
    'access'          => TRUE,
    'file'            => 'addresses.inc',
    'page callback'   => '_addresses_autocomplete',
    'type'            => MENU_CALLBACK
  );

  return $items;
}

/**
 * Implementation of hook_theme().
 */
function addresses_theme() {
  return array(
    'addresses' => array(
      'arguments' => array('address', 'hide'),
      'file'      => 'addresses.inc',
    ),
    'addresses_form' => array(
      'arguments' => array('form'),
      'file'      => 'addresses.inc',
    ),
    'addresses_address_singleline' => array(
      'arguments' => array('addresses'),
      'file'      => 'addresses.inc',
    ),
  );
}
